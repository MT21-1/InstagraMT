

type Query {
  users: [User!]!
}

type User{
  id: String!
  email: String!
  full_name: String!
  username: String!
  password: String!
  picture: String!
  is_verified: Boolean!
  is_google_account: Boolean!
}

type PostContent{
  id: String!
  post_id: String!
  type: String!
  path: String!
}

type Post{
  id: String!
  user_id: String!
  caption: String!
  created_at: String!
  post_contents: [PostContent!]!
}

type Relation{
  id: String!
  follow_id: String!
  followed_id: String!
}

input InputUser{
  email: String!
  full_name: String!
  username: String!
  password: String!
}

input LoginUser{
  email: String!
  password: String!
}

input VerifyEmail{
  email: String!
  token: String!
}

input updatePassword{
  token: String!
  password: String!
}

input newPost{
  content: [newPostContent]!
  caption: String!
  user_id: String!
}

input newPostContent{
  path: String!
  type: String!
}

input newRelation{
  follow_id: String!
  followed_id: String!
}


type Mutation{
  createUser(input: InputUser!): String!
  loginUser(input: LoginUser!): String!
  usernameExist(input: String!): Boolean!
  emailExist(input: String!):Boolean!
  gmailLogin(access_token: String!): String!
  isVerified(input: String!): Boolean!
  resendVerificationCode(input: String!): String!
  verifyUser(input: VerifyEmail!): String!
  sendResetPassword(input: String!): String!
  verifyResetPassword(input: updatePassword!): String!
  getUserBasedOnUsername(input: String!): User!
  getUserBasedOnEmail(input: String!): User!
  getPostBasedOnUserId(input: String!): [Post!]!
  getPostBasedOnPostId(input:String!): Post!
  insertNewPost(input: newPost!): Post!
  createRelation(input: newRelation!): Relation!
  deleteRelation(input: newRelation!): Boolean!
  getFollowers(input:String!): [Relation!]!
  getFollowing(input:String!): [Relation!]!
  isFollowing(input: newRelation!): Boolean!
  searchUser(input: String!): [User!]!
}